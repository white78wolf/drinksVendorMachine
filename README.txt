
В процессе разработки веб-приложения, имитирующего работу автомата по продаже напитков, 
была использована технология ASP.NET MVC4 + EntityFramework + Razor. 
Проект выполнен в Visual Studio 2012 с использованием MS SQL Server 2012. 
Реализованы почти все требования, не считая того, 
что вместо двух страниц приложение содержит 3 страницы, включая вход в админ-панель. 
Необязательные требования: можно "купить" несколько напитков и уже потом "забрать сдачу".

В шаблоне "пустого проекта asp.net mvc4 на razor" созданы необходимые контроллеры с действиями 
и представления, так же добавил несколько статических переменных для доступа к данным 
из контекста БД в связи с тем, что в представлении можно одновременно подключить 
только одну модель (технология только изучается, возможны нюансы).
В качестве хранилища использовал класс Repository.cs, 
работающий с контекстом БД (EfDbContext.cs) и реализующий доступ 
к данным из таблиц напитков и монет, а так же сохранение и удаление записей из этих таблиц.
В папке Content содержатся папка с дефолтным изображением напитка и папка со стилями. 
Изображения, загружаемые пользователем-администратором, сохраняются в БД, 
которая согласно ТЗ находится в App_Data и подключается через (LocalDB)\v11.0. 
В представлении они выводятся с помощью @Html.Raw(...src=\"data:image...).
Авторизация скопирована с примера на 
https://keestalkstech.com/2016/06/simple-database-less-authentication-mvc-net/, 
часть приёмов и методов в ходе разработки в целом позаимствованы из уроков 
создания интернет-магазина на сайте professorweb с применением WebForms, 
на очереди изучения тот же магазин, но с применением MVC+Razor+Bootstrap. 
Так же использовалась информация с metanit'а и других форумов.

В перспективе могут быть реализованы следующие "фичи" - 
развёрнутая система сообщений на панели выбора напитков, 
доступ в админ-панель через форму на главной странице, 
асинхронные запросы + работа с монетами на стороне клиента и т. п.
В частности, автомат мог бы выдавать извинение по поводу невозможности сдачи, 
если монетки определённого номинала закончились.

Так же представляет интерес блокирование ввода пользователем-админом ненужных символов 
в названии напитка, на данный момент только добавил [AllowHtml] к свойству Name в модели, 
чтобы не выкидывало ошибку. И да, это делает приложение уязвимым для XSS. 
Проблему "скачка" номера identity в таблице БД после сбоя (характерную для MS SQL Server 2012) 
тоже оставил на потом - нужно выяснить, как использовать use trace flag 272.

Проект рабочий, пригоден для дальнейшей доработки в качестве хобби и для портфолио.
